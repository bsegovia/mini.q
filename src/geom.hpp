/*-------------------------------------------------------------------------
 - mini.q - a minimalistic multiplayer fps
 - geom.hpp -> exposes mesh creation, simplification and update routines
 -------------------------------------------------------------------------*/
#pragma once
#include "csg.hpp"
#include "base/math.hpp"
#include "base/task.hpp"
#include "base/sys.hpp"

namespace q {
namespace iso {
struct octree;
} /* namespace iso */
} /* namespace q */

namespace q {
namespace geom {

// describe a set of consecutive primitives with same material
struct segment {u32 start, num, mat;};

// simple structure to describe meshes generated by marching cube or dual
// contouring
struct mesh {
  mesh();
  void init(vec3f *pos, vec3f *nor, u32 *index,
            segment *seg, u32 vn, u32 idxn, u32 segn);
  void destroy();
  vec3f *m_pos, *m_nor;
  u32 *m_index;
  segment *m_segment;
  u32 m_vertnum;
  u32 m_indexnum;
  u32 m_segmentnum;
};

// create a task to build a mesh from a "contoured" octree
ref<task> buildmesh(mesh &m, iso::octree &o, float cellsize, int waitnum = 1);

// load/store the mesh in the given stream
void store(const char *filename, const mesh &m);
bool load(const char *filename, mesh &m);
} /* namespace geom */
} /* namespace q */

