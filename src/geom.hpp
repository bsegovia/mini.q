/*-------------------------------------------------------------------------
 - mini.q - a minimalistic multiplayer fps
 - geom.hpp -> exposes mesh creation, simplification and update routines
 -------------------------------------------------------------------------*/
#pragma once
#include "csg.hpp"
#include "base/math.hpp"
#include "base/sys.hpp"

namespace q {
namespace iso {
struct octree;
} /* namespace iso */
} /* namespace q */

namespace q {
namespace geom {

// describe a set of consecutive primitives with same material
struct segment {u32 start, num, mat;};

// simple structure to describe meshes generated by marching cube or dual
// contouring
struct mesh {
  INLINE mesh(vec3f *pos=NULL, vec3f *nor=NULL, u32 *index=NULL,
              segment *seg=NULL, u32 vn=0, u32 idxn=0, u32 segn=0) :
    m_pos(pos), m_nor(nor), m_index(index), m_segment(seg),
    m_vertnum(vn), m_indexnum(idxn), m_segmentnum(segn) {}
  void destroy();
  vec3f *m_pos, *m_nor;
  u32 *m_index;
  segment *m_segment;
  u32 m_vertnum;
  u32 m_indexnum;
  u32 m_segmentnum;
};

// build the entire mesh from the given iso octree
mesh buildmesh(iso::octree&, float cellsize);

// load/store the mesh in the given stream
void store(const char *filename, const mesh &m);
bool load(const char *filename, mesh &m);
} /* namespace geom */
} /* namespace q */

