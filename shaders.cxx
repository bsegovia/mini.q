/*-------------------------------------------------------------------------
 - mini.q - a minimalistic multiplayer FPS
 - shaders.cxx -> stores shaders (do not modify)
 -------------------------------------------------------------------------*/
const char debugunsplit_fp[] = {
"#define SAMPLE(NUM, X, Y) \\\n"
"  vec2 uv##NUM = uv+vec2(X,Y);\\\n"
"  vec2 bufindex##NUM = mod(uv##NUM, SPLITNUM);\\\n"
"  vec2 pixindex##NUM = uv##NUM / vec2(SPLITNUM);\\\n"
"  vec2 unsplituv##NUM = pixindex##NUM + bufindex##NUM * u_subbufferdim;\\\n"
"  vec3 col##NUM = texture2DRect(u_lighttex, unsplituv##NUM).xyz;\\\n"
"  vec2 nor##NUM = texture2DRect(u_nortex, uv##NUM).xy;\\\n"
"  bool ok##NUM = dot(nor##NUM, nor) > 0.8;\\\n"
"  col += ok##NUM ? col##NUM : vec3(0.0);\\\n"
"  num += ok##NUM ? 1.0 : 0.0;\n"

"void main() {\n"
"  vec2 uv = floor(gl_FragCoord.xy);\n"
"  vec2 bufindex = mod(uv, SPLITNUM);\n"
"  vec2 pixindex = uv / vec2(SPLITNUM);\n"
"  vec2 unsplituv = pixindex + bufindex * u_subbufferdim;\n"
"  vec2 nor = texture2DRect(u_nortex, uv).xy;\n"
"  vec3 col = vec3(0.0);\n"
"  float num = 0.0;\n"
"  SAMPLE(0,  -1.0, +1.0);\n"
"  SAMPLE(1,  -1.0,  0.0);\n"
"  SAMPLE(2,  -1.0, -1.0);\n"
"  SAMPLE(3,  -1.0, -2.0);\n"
"  SAMPLE(4,   0.0, +1.0);\n"
"  SAMPLE(5,   0.0,  0.0);\n"
"  SAMPLE(6,   0.0, -1.0);\n"
"  SAMPLE(7,   0.0, -2.0);\n"
"  SAMPLE(8,  +1.0, +1.0);\n"
"  SAMPLE(9,  +1.0,  0.0);\n"
"  SAMPLE(10, +1.0, -1.0);\n"
"  SAMPLE(11, +1.0, -2.0);\n"
"  SAMPLE(12, +2.0, +1.0);\n"
"  SAMPLE(13, +2.0,  0.0);\n"
"  SAMPLE(14, +2.0, -1.0);\n"
"  SAMPLE(15, +2.0, -2.0);\n"
"  SWITCH_WEBGL(gl_FragColor, rt_col) = vec4(col, 1.0);\n"
"}\n"
};

const char debugunsplit_vp[] = {
"void main() {gl_Position = u_mvp*vec4(vs_pos,1.0,1.0);}\n"
};

const char deferred_fp[] = {
"void main() {\n"
"  vec2 uv = gl_FragCoord.xy;\n"
"  vec3 nor = normalize(2.0*texture2DRect(u_nortex, uv).xyz-1.0);\n"
"  float depth = texture2DRect(u_depthtex, uv).r;\n"
"  vec4 outcol;\n"
"  if (depth != 1.0) {\n"
"    vec4 posw = u_invmvp * vec4(uv, depth, 1.0);\n"
"    vec3 pos = posw.xyz / posw.w;\n"
"    vec3 ldir = u_lightpos-pos;\n"
"    float llen2 = dot(ldir,ldir);\n"
"    outcol.xyz = vec3(2000.0) * max(dot(nor,ldir),0.0) / (llen2*llen2);\n"
"    outcol.w = 1.0;\n"
"  } else {\n"
"    vec4 rdh = u_dirinvmvp * vec4(uv, 0.0, 1.0);\n"
"    vec3 rd = normalize(rdh.xyz/rdh.w);\n"
"    outcol = vec4(getsky(rd, u_sundir), 1.0);\n"
"  }\n"
"  SWITCH_WEBGL(gl_FragColor, rt_col) = outcol;\n"
"}\n"
};

const char deferred_vp[] = {
"void main() {gl_Position = vec4(vs_pos,0.0,1.0);}\n"
};

const char fixed_fp[] = {
"#if USE_DIFFUSETEX\n"
"uniform sampler2D u_diffuse;\n"
"PS_IN vec2 fs_tex;\n"
"#endif\n"
"#if USE_COL\n"
"PS_IN vec4 fs_col;\n"
"#endif\n"
"IF_NOT_WEBGL(out vec4 rt_col);\n"

"void main() {\n"
"  vec4 col;\n"
"#if USE_COL\n"
"  vec4 incol = fs_col;\n"
"#else\n"
"  vec4 incol = vec4(1.0);\n"
"#endif\n"
"#if USE_DIFFUSETEX\n"
"  col = texture2D(u_diffuse, fs_tex);\n"
"  col *= incol;\n"
"#else\n"
"  col = incol;\n"
"#endif\n"
"  SWITCH_WEBGL(gl_FragColor, rt_col) = col;\n"
"}\n"
};

const char fixed_vp[] = {
"uniform mat4 u_mvp;\n"
"#if USE_KEYFRAME\n"
"uniform float u_delta;\n"
"VS_IN vec3 vs_pos0, vs_pos1;\n"
"#else\n"
"VS_IN vec3 vs_pos;\n"
"#endif\n"
"#if USE_COL\n"
"VS_IN vec4 vs_col;\n"
"VS_OUT vec4 fs_col;\n"
"#endif\n"
"#if USE_DIFFUSETEX\n"
"VS_IN vec2 vs_tex;\n"
"VS_OUT vec2 fs_tex;\n"
"#endif\n"
"void main() {\n"
"#if USE_DIFFUSETEX\n"
"  fs_tex = vs_tex;\n"
"#endif\n"
"#if USE_COL\n"
"  fs_col = vs_col;\n"
"#endif\n"
"#if USE_KEYFRAME\n"
"  vec3 vs_pos = mix(vs_pos0,vs_pos1,u_delta);\n"
"#endif\n"
"  gl_Position = u_mvp*vec4(vs_pos,1.0);\n"
"}\n"
};

const char font_fp[] = {
"uniform sampler2D u_diffuse;\n"
"uniform vec2 u_fontwh;\n"
"uniform float u_font_thickness;\n"
"uniform float u_outline_width;\n"
"uniform vec4 u_outline_color;\n"
"PS_IN vec2 fs_tex;\n"
"IF_NOT_WEBGL(out vec4 rt_col);\n"

"#define RSQ2 0.7071078\n"

"void distseg(inout float dist, vec2 start, vec2 end, vec2 nor, vec2 pos) {\n"
"  bool inside =  (dot(pos-start,end-start)>=0.0 && dot(end-pos,end-start)>=0.0);\n"
"  dist = inside ? min(dist, abs(dot(pos-start, nor))) : dist;\n"
"}\n"

"void main() {\n"
"  vec2 uv = fs_tex;\n"
"  vec2 c = vec2(0.5);\n"
"  vec2 pos = fract(uv * u_fontwh);\n"
"  vec2 duv = vec2(1.0) / u_fontwh;\n"
"  float s  = texture2D(u_diffuse, uv).r;\n"
"  float l  = texture2D(u_diffuse, uv+vec2(-duv.x,0.0)).r;\n"
"  float r  = texture2D(u_diffuse, uv+vec2(+duv.x,0.0)).r;\n"
"  float t  = texture2D(u_diffuse, uv+vec2(0.0, duv.y)).r;\n"
"  float b  = texture2D(u_diffuse, uv+vec2(0.0,-duv.y)).r;\n"
"  float tl = texture2D(u_diffuse, uv+vec2(-duv.x, duv.y)).r;\n"
"  float tr = texture2D(u_diffuse, uv+vec2( duv.x, duv.y)).r;\n"
"  float bl = texture2D(u_diffuse, uv+vec2(-duv.x,-duv.y)).r;\n"
"  float br = texture2D(u_diffuse, uv+vec2( duv.x,-duv.y)).r;\n"
"  float dist = 1.0;\n"
"  if (s != 0.0) {\n"
"    dist = distance(pos,c);\n"
"    if (l!=0.0) distseg(dist, c, vec2(-0.5,0.5), vec2(0.0,1.0), pos);\n"
"    if (r!=0.0) distseg(dist, c, vec2(+1.5,0.5), vec2(0.0,1.0), pos);\n"
"    if (t!=0.0) distseg(dist, c, vec2(0.5,+1.5), vec2(1.0,0.0), pos);\n"
"    if (b!=0.0) distseg(dist, c, vec2(0.5,-0.5), vec2(1.0,0.0), pos);\n"
"    if (l==0.0&&t==0.0&&tl!=0.0) distseg(dist, c, vec2(-0.5,+1.5), vec2(+RSQ2,RSQ2), pos);\n"
"    if (r==0.0&&t==0.0&&tr!=0.0) distseg(dist, c, vec2(+1.5,+1.5), vec2(-RSQ2,RSQ2), pos);\n"
"    if (l==0.0&&b==0.0&&bl!=0.0) distseg(dist, c, vec2(-0.5,-0.5), vec2(-RSQ2,RSQ2), pos);\n"
"    if (r==0.0&&b==0.0&&br!=0.0) distseg(dist, c, vec2(+1.5,-0.5), vec2(+RSQ2,RSQ2), pos);\n"
"  } else {\n"
"    if (t!=0.0&&r!=0.0&&tr==0.0) distseg(dist, vec2(0.5,+1.5), vec2(+1.5,0.5), vec2(+RSQ2,+RSQ2), pos);\n"
"    if (t!=0.0&&l!=0.0&&tl==0.0) distseg(dist, vec2(0.5,+1.5), vec2(-0.5,0.5), vec2(-RSQ2,+RSQ2), pos);\n"
"    if (b!=0.0&&r!=0.0&&br==0.0) distseg(dist, vec2(0.5,-0.5), vec2(+1.5,0.5), vec2(-RSQ2,+RSQ2), pos);\n"
"    if (b!=0.0&&l!=0.0&&bl==0.0) distseg(dist, vec2(0.5,-0.5), vec2(-0.5,0.5), vec2(+RSQ2,+RSQ2), pos);\n"
"  }\n"
"  float no = u_font_thickness-u_outline_width;\n"
"  float o = u_font_thickness;\n"
"  vec4 col = vec4(1.0-smoothstep(no-0.1, no, dist));\n"
"  col += u_outline_color * (1.0-smoothstep(o-0.1, o, dist));\n"
"  SWITCH_WEBGL(gl_FragColor, rt_col) = col;\n"
"}\n"
};

const char forward_fp[] = {
"PS_IN vec3 fs_nor;\n"

"#define SAMPLE(NUM, X, Y) \\\n"
"  vec2 uv##NUM = uv+vec2(X,Y);\\\n"
"  vec2 bufindex##NUM = mod(uv##NUM, SPLITNUM);\\\n"
"  vec2 pixindex##NUM = uv##NUM / vec2(SPLITNUM);\\\n"
"  vec2 unsplituv##NUM = pixindex##NUM + bufindex##NUM * u_subbufferdim;\\\n"
"  vec3 col##NUM = texture2DRect(u_lighttex, unsplituv##NUM).xyz;\\\n"
"  vec2 nor##NUM = texture2DRect(u_nortex, uv##NUM).xy;\\\n"
"  bool ok##NUM = dot(nor##NUM, nor) > 0.8;\\\n"
"  col += ok##NUM ? col##NUM : vec3(0.0);\\\n"
"  num += ok##NUM ? 1.0 : 0.0;\n"

"void main() {\n"
"  vec2 uv = floor(gl_FragCoord.xy);\n"
"  vec3 col = vec3(0.0);\n"
"  vec2 nor = fs_nor.xy;\n"
"  float num = 0.0;\n"
"  SAMPLE(0,  -1.0, +1.0);\n"
"  SAMPLE(1,  -1.0,  0.0);\n"
"  SAMPLE(2,  -1.0, -1.0);\n"
"  SAMPLE(3,  -1.0, -2.0);\n"
"  SAMPLE(4,   0.0, +1.0);\n"
"  SAMPLE(5,   0.0,  0.0);\n"
"  SAMPLE(6,   0.0, -1.0);\n"
"  SAMPLE(7,   0.0, -2.0);\n"
"  SAMPLE(8,  +1.0, +1.0);\n"
"  SAMPLE(9,  +1.0,  0.0);\n"
"  SAMPLE(10, +1.0, -1.0);\n"
"  SAMPLE(11, +1.0, -2.0);\n"
"  SAMPLE(12, +2.0, +1.0);\n"
"  SAMPLE(13, +2.0,  0.0);\n"
"  SAMPLE(14, +2.0, -1.0);\n"
"  SAMPLE(15, +2.0, -2.0);\n"
"  SWITCH_WEBGL(gl_FragColor, rt_col) = vec4(col, 1.0);\n"
"}\n"
};

const char forward_vp[] = {
"VS_OUT vec3 fs_nor;\n"
"void entry(inout vec3 fs_nor, in vec3 vs_nor) {\n"
"  fs_nor = vs_nor;\n"
"  gl_Position = u_mvp*vec4(vs_pos,1.0);\n"
"}\n"
"void main() {entry(fs_nor, vs_nor);}\n"
};

const char fxaa[] = {
"#define FXAA_GLSL_130 1\n"
"#define FXAA_QUALITY_PRESET 39\n"
"#define FXAA_GREEN_AS_LUMA 1\n"

"/*============================================================================\n"

"                             INTEGRATION KNOBS\n"

"============================================================================*/\n"
"//\n"
"// FXAA_PS3 and FXAA_360 choose the console algorithm (FXAA3 CONSOLE).\n"
"// FXAA_360_OPT is a prototype for the new optimized 360 version.\n"
"//\n"
"// 1 = Use API.\n"
"// 0 = Don't use API.\n"
"//\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_PS3\n"
"    #define FXAA_PS3 0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_360\n"
"    #define FXAA_360 0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_360_OPT\n"
"    #define FXAA_360_OPT 0\n"
"#endif\n"
"/*==========================================================================*/\n"
"#ifndef FXAA_PC\n"
"    //\n"
"    // FXAA Quality\n"
"    // The high quality PC algorithm.\n"
"    //\n"
"    #define FXAA_PC 0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_PC_CONSOLE\n"
"    //\n"
"    // The console algorithm for PC is included\n"
"    // for developers targeting really low spec machines.\n"
"    // Likely better to just run FXAA_PC, and use a really low preset.\n"
"    //\n"
"    #define FXAA_PC_CONSOLE 0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_GLSL_120\n"
"    #define FXAA_GLSL_120 0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_GLSL_130\n"
"    #define FXAA_GLSL_130 0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_HLSL_3\n"
"    #define FXAA_HLSL_3 0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_HLSL_4\n"
"    #define FXAA_HLSL_4 0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_HLSL_5\n"
"    #define FXAA_HLSL_5 0\n"
"#endif\n"
"/*==========================================================================*/\n"
"#ifndef FXAA_GREEN_AS_LUMA\n"
"    //\n"
"    // For those using non-linear color,\n"
"    // and either not able to get luma in alpha, or not wanting to,\n"
"    // this enables FXAA to run using green as a proxy for luma.\n"
"    // So with this enabled, no need to pack luma in alpha.\n"
"    //\n"
"    // This will turn off AA on anything which lacks some amount of green.\n"
"    // Pure red and blue or combination of only R and B, will get no AA.\n"
"    //\n"
"    // Might want to lower the settings for both,\n"
"    //    fxaaConsoleEdgeThresholdMin\n"
"    //    fxaaQualityEdgeThresholdMin\n"
"    // In order to insure AA does not get turned off on colors \n"
"    // which contain a minor amount of green.\n"
"    //\n"
"    // 1 = On.\n"
"    // 0 = Off.\n"
"    //\n"
"    #define FXAA_GREEN_AS_LUMA 0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_EARLY_EXIT\n"
"    //\n"
"    // Controls algorithm's early exit path.\n"
"    // On PS3 turning this ON adds 2 cycles to the shader.\n"
"    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\n"
"    // Turning this off on console will result in a more blurry image.\n"
"    // So this defaults to on.\n"
"    //\n"
"    // 1 = On.\n"
"    // 0 = Off.\n"
"    //\n"
"    #define FXAA_EARLY_EXIT 1\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_DISCARD\n"
"    //\n"
"    // Only valid for PC OpenGL currently.\n"
"    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\n"
"    //\n"
"    // 1 = Use discard on pixels which don't need AA.\n"
"    //     For APIs which enable concurrent TEX+ROP from same surface.\n"
"    // 0 = Return unchanged color on pixels which don't need AA.\n"
"    //\n"
"    #define FXAA_DISCARD 0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_FAST_PIXEL_OFFSET\n"
"    //\n"
"    // Used for GLSL 120 only.\n"
"    //\n"
"    // 1 = GL API supports fast pixel offsets\n"
"    // 0 = do not use fast pixel offsets\n"
"    //\n"
"    #ifdef GL_EXT_gpu_shader4\n"
"        #define FXAA_FAST_PIXEL_OFFSET 1\n"
"    #endif\n"
"    #ifdef GL_NV_gpu_shader5\n"
"        #define FXAA_FAST_PIXEL_OFFSET 1\n"
"    #endif\n"
"    #ifdef GL_ARB_gpu_shader5\n"
"        #define FXAA_FAST_PIXEL_OFFSET 1\n"
"    #endif\n"
"    #ifndef FXAA_FAST_PIXEL_OFFSET\n"
"        #define FXAA_FAST_PIXEL_OFFSET 0\n"
"    #endif\n"
"#endif\n"
"#if 0\n"
"/*--------------------------------------------------------------------------*/\n"
"#ifndef FXAA_GATHER4_ALPHA\n"
"    //\n"
"    // 1 = API supports gather4 on alpha channel.\n"
"    // 0 = API does not support gather4 on alpha channel.\n"
"    //\n"
"    #if (FXAA_HLSL_5 == 1)\n"
"        #define FXAA_GATHER4_ALPHA 1\n"
"    #endif\n"
"    #ifdef GL_ARB_gpu_shader5\n"
"        #define FXAA_GATHER4_ALPHA 1\n"
"    #endif\n"
"    #ifdef GL_NV_gpu_shader5\n"
"        #define FXAA_GATHER4_ALPHA 1\n"
"    #endif\n"
"    #ifndef FXAA_GATHER4_ALPHA\n"
"        #define FXAA_GATHER4_ALPHA 0\n"
"    #endif\n"
"#endif\n"
"#else\n"
"        #define FXAA_GATHER4_ALPHA 0\n"
"#endif\n"

"/*============================================================================\n"
"                        FXAA QUALITY - TUNING KNOBS\n"
"------------------------------------------------------------------------------\n"
"NOTE the other tuning knobs are now in the shader function inputs!\n"
"============================================================================*/\n"
"#ifndef FXAA_QUALITY_PRESET\n"
"    //\n"
"    // Choose the quality preset.\n"
"    // This needs to be compiled into the shader as it effects code.\n"
"    // Best option to include multiple presets is to \n"
"    // in each shader define the preset, then include this file.\n"
"    // \n"
"    // OPTIONS\n"
"    // -----------------------------------------------------------------------\n"
"    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\n"
"    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\n"
"    // 39       - no dither, very expensive \n"
"    //\n"
"    // NOTES\n"
"    // -----------------------------------------------------------------------\n"
"    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\n"
"    // 13 = about same speed as FXAA 3.9 and better than 12\n"
"    // 23 = closest to FXAA 3.9 visually and performance wise\n"
"    //  _ = the lowest digit is directly related to performance\n"
"    // _  = the highest digit is directly related to style\n"
"    // \n"
"    #define FXAA_QUALITY_PRESET 12\n"
"#endif\n"

"/*============================================================================\n"

"                           FXAA QUALITY - PRESETS\n"

"============================================================================*/\n"

"/*============================================================================\n"
"                     FXAA QUALITY - MEDIUM DITHER PRESETS\n"
"============================================================================*/\n"
"#if (FXAA_QUALITY_PRESET == 10)\n"
"    #define FXAA_QUALITY_PS 3\n"
"    #define FXAA_QUALITY_P0 1.5\n"
"    #define FXAA_QUALITY_P1 3.0\n"
"    #define FXAA_QUALITY_P2 12.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 11)\n"
"    #define FXAA_QUALITY_PS 4\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 3.0\n"
"    #define FXAA_QUALITY_P3 12.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 12)\n"
"    #define FXAA_QUALITY_PS 5\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 4.0\n"
"    #define FXAA_QUALITY_P4 12.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 13)\n"
"    #define FXAA_QUALITY_PS 6\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 2.0\n"
"    #define FXAA_QUALITY_P4 4.0\n"
"    #define FXAA_QUALITY_P5 12.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 14)\n"
"    #define FXAA_QUALITY_PS 7\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 2.0\n"
"    #define FXAA_QUALITY_P4 2.0\n"
"    #define FXAA_QUALITY_P5 4.0\n"
"    #define FXAA_QUALITY_P6 12.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 15)\n"
"    #define FXAA_QUALITY_PS 8\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 2.0\n"
"    #define FXAA_QUALITY_P4 2.0\n"
"    #define FXAA_QUALITY_P5 2.0\n"
"    #define FXAA_QUALITY_P6 4.0\n"
"    #define FXAA_QUALITY_P7 12.0\n"
"#endif\n"

"/*============================================================================\n"
"                     FXAA QUALITY - LOW DITHER PRESETS\n"
"============================================================================*/\n"
"#if (FXAA_QUALITY_PRESET == 20)\n"
"    #define FXAA_QUALITY_PS 3\n"
"    #define FXAA_QUALITY_P0 1.5\n"
"    #define FXAA_QUALITY_P1 2.0\n"
"    #define FXAA_QUALITY_P2 8.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 21)\n"
"    #define FXAA_QUALITY_PS 4\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 8.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 22)\n"
"    #define FXAA_QUALITY_PS 5\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 2.0\n"
"    #define FXAA_QUALITY_P4 8.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 23)\n"
"    #define FXAA_QUALITY_PS 6\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 2.0\n"
"    #define FXAA_QUALITY_P4 2.0\n"
"    #define FXAA_QUALITY_P5 8.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 24)\n"
"    #define FXAA_QUALITY_PS 7\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 2.0\n"
"    #define FXAA_QUALITY_P4 2.0\n"
"    #define FXAA_QUALITY_P5 3.0\n"
"    #define FXAA_QUALITY_P6 8.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 25)\n"
"    #define FXAA_QUALITY_PS 8\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 2.0\n"
"    #define FXAA_QUALITY_P4 2.0\n"
"    #define FXAA_QUALITY_P5 2.0\n"
"    #define FXAA_QUALITY_P6 4.0\n"
"    #define FXAA_QUALITY_P7 8.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 26)\n"
"    #define FXAA_QUALITY_PS 9\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 2.0\n"
"    #define FXAA_QUALITY_P4 2.0\n"
"    #define FXAA_QUALITY_P5 2.0\n"
"    #define FXAA_QUALITY_P6 2.0\n"
"    #define FXAA_QUALITY_P7 4.0\n"
"    #define FXAA_QUALITY_P8 8.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 27)\n"
"    #define FXAA_QUALITY_PS 10\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 2.0\n"
"    #define FXAA_QUALITY_P4 2.0\n"
"    #define FXAA_QUALITY_P5 2.0\n"
"    #define FXAA_QUALITY_P6 2.0\n"
"    #define FXAA_QUALITY_P7 2.0\n"
"    #define FXAA_QUALITY_P8 4.0\n"
"    #define FXAA_QUALITY_P9 8.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 28)\n"
"    #define FXAA_QUALITY_PS 11\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 2.0\n"
"    #define FXAA_QUALITY_P4 2.0\n"
"    #define FXAA_QUALITY_P5 2.0\n"
"    #define FXAA_QUALITY_P6 2.0\n"
"    #define FXAA_QUALITY_P7 2.0\n"
"    #define FXAA_QUALITY_P8 2.0\n"
"    #define FXAA_QUALITY_P9 4.0\n"
"    #define FXAA_QUALITY_P10 8.0\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_QUALITY_PRESET == 29)\n"
"    #define FXAA_QUALITY_PS 12\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.5\n"
"    #define FXAA_QUALITY_P2 2.0\n"
"    #define FXAA_QUALITY_P3 2.0\n"
"    #define FXAA_QUALITY_P4 2.0\n"
"    #define FXAA_QUALITY_P5 2.0\n"
"    #define FXAA_QUALITY_P6 2.0\n"
"    #define FXAA_QUALITY_P7 2.0\n"
"    #define FXAA_QUALITY_P8 2.0\n"
"    #define FXAA_QUALITY_P9 2.0\n"
"    #define FXAA_QUALITY_P10 4.0\n"
"    #define FXAA_QUALITY_P11 8.0\n"
"#endif\n"

"/*============================================================================\n"
"                     FXAA QUALITY - EXTREME QUALITY\n"
"============================================================================*/\n"
"#if (FXAA_QUALITY_PRESET == 39)\n"
"    #define FXAA_QUALITY_PS 12\n"
"    #define FXAA_QUALITY_P0 1.0\n"
"    #define FXAA_QUALITY_P1 1.0\n"
"    #define FXAA_QUALITY_P2 1.0\n"
"    #define FXAA_QUALITY_P3 1.0\n"
"    #define FXAA_QUALITY_P4 1.0\n"
"    #define FXAA_QUALITY_P5 1.5\n"
"    #define FXAA_QUALITY_P6 2.0\n"
"    #define FXAA_QUALITY_P7 2.0\n"
"    #define FXAA_QUALITY_P8 2.0\n"
"    #define FXAA_QUALITY_P9 2.0\n"
"    #define FXAA_QUALITY_P10 4.0\n"
"    #define FXAA_QUALITY_P11 8.0\n"
"#endif\n"


"/*============================================================================\n"

"                                API PORTING\n"

"============================================================================*/\n"
"#if (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\n"
"    #define FxaaBool bool\n"
"    #define FxaaDiscard discard\n"
"    #define FxaaFloat float\n"
"    #define FxaaFloat2 vec2\n"
"    #define FxaaFloat3 vec3\n"
"    #define FxaaFloat4 vec4\n"
"    #define FxaaHalf float\n"
"    #define FxaaHalf2 vec2\n"
"    #define FxaaHalf3 vec3\n"
"    #define FxaaHalf4 vec4\n"
"    #define FxaaInt2 ivec2\n"
"    #define FxaaSat(x) clamp(x, 0.0, 1.0)\n"
"    #define FxaaTex sampler2D\n"
"#else\n"
"    #define FxaaBool bool\n"
"    #define FxaaDiscard clip(-1)\n"
"    #define FxaaFloat float\n"
"    #define FxaaFloat2 float2\n"
"    #define FxaaFloat3 float3\n"
"    #define FxaaFloat4 float4\n"
"    #define FxaaHalf half\n"
"    #define FxaaHalf2 half2\n"
"    #define FxaaHalf3 half3\n"
"    #define FxaaHalf4 half4\n"
"    #define FxaaSat(x) saturate(x)\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_GLSL_120 == 1)\n"
"    // Requires,\n"
"    //  #version 120\n"
"    // And at least,\n"
"    //  #extension GL_EXT_gpu_shader4 : enable\n"
"    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\n"
"    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\n"
"    #if (FXAA_FAST_PIXEL_OFFSET == 1)\n"
"        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\n"
"    #else\n"
"        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\n"
"    #endif\n"
"    #if (FXAA_GATHER4_ALPHA == 1)\n"
"        // use #extension GL_ARB_gpu_shader5 : enable\n"
"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n"
"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n"
"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n"
"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n"
"    #endif\n"
"#endif\n"
"/*--------------------------------------------------------------------------*/\n"
"#if (FXAA_GLSL_130 == 1)\n"
"    // Requires #version 130 or better\n"
"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\n"
"    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\n"
"    #if (FXAA_GATHER4_ALPHA == 1)\n"
"        // use #extension GL_ARB_gpu_shader5 : enable\n"
"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n"
"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n"
"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n"
"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n"
"    #endif\n"
"#endif\n"

"/*============================================================================\n"
"                   GREEN AS LUMA OPTION SUPPORT FUNCTION\n"
"============================================================================*/\n"
"#if (FXAA_GREEN_AS_LUMA == 0)\n"
"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\n"
"#else\n"
"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.r; }\n"
"#endif\n"

"/*--------------------------------------------------------------------------*/\n"
"FxaaFloat4 FxaaPixelShader(\n"
"    //\n"
"    // Use noperspective interpolation here (turn off perspective interpolation).\n"
"    // {xy} = center of pixel\n"
"    FxaaFloat2 pos,\n"
"    //\n"
"    // Input color texture.\n"
"    // {rgb_} = color in linear or perceptual color space\n"
"    // if (FXAA_GREEN_AS_LUMA == 0)\n"
"    //     {__a} = luma in perceptual color space (not linear)\n"
"    FxaaTex tex,\n"
"    //\n"
"    // Only used on FXAA Quality.\n"
"    // This must be from a constant/uniform.\n"
"    // {x_} = 1.0/screenWidthInPixels\n"
"    // {_y} = 1.0/screenHeightInPixels\n"
"    FxaaFloat2 fxaaQualityRcpFrame,\n"
"    //\n"
"    // Only used on FXAA Quality.\n"
"    // This used to be the FXAA_QUALITY_SUBPIX define.\n"
"    // It is here now to allow easier tuning.\n"
"    // Choose the amount of sub-pixel aliasing removal.\n"
"    // This can effect sharpness.\n"
"    //   1.00 - upper limit (softer)\n"
"    //   0.75 - default amount of filtering\n"
"    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\n"
"    //   0.25 - almost off\n"
"    //   0.00 - completely off\n"
"    FxaaFloat fxaaQualitySubpix,\n"
"    //\n"
"    // Only used on FXAA Quality.\n"
"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\n"
"    // It is here now to allow easier tuning.\n"
"    // The minimum amount of local contrast required to apply algorithm.\n"
"    //   0.333 - too little (faster)\n"
"    //   0.250 - low quality\n"
"    //   0.166 - default\n"
"    //   0.125 - high quality \n"
"    //   0.063 - overkill (slower)\n"
"    FxaaFloat fxaaQualityEdgeThreshold,\n"
"    //\n"
"    // Only used on FXAA Quality.\n"
"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\n"
"    // It is here now to allow easier tuning.\n"
"    // Trims the algorithm from processing darks.\n"
"    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\n"
"    //   0.0625 - high quality (faster)\n"
"    //   0.0312 - visible limit (slower)\n"
"    // Special notes when using FXAA_GREEN_AS_LUMA,\n"
"    //   Likely want to set this to zero.\n"
"    //   As colors that are mostly not-green\n"
"    //   will appear very dark in the green channel!\n"
"    //   Tune by looking at mostly non-green content,\n"
"    //   then start at zero and increase until aliasing is a problem.\n"
"    FxaaFloat fxaaQualityEdgeThresholdMin\n"
") {\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaFloat2 posM;\n"
"    posM.x = pos.x;\n"
"    posM.y = pos.y;\n"
"    #if (FXAA_GATHER4_ALPHA == 1)\n"
"        #if (FXAA_DISCARD == 0)\n"
"            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n"
"            #if (FXAA_GREEN_AS_LUMA == 0)\n"
"                #define lumaM rgbyM.w\n"
"            #else\n"
"                #define lumaM rgbyM.y\n"
"            #endif\n"
"        #endif\n"
"        #if (FXAA_GREEN_AS_LUMA == 0)\n"
"            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\n"
"            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\n"
"        #else\n"
"            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\n"
"            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\n"
"        #endif\n"
"        #if (FXAA_DISCARD == 1)\n"
"            #define lumaM luma4A.w\n"
"        #endif\n"
"        #define lumaE luma4A.z\n"
"        #define lumaS luma4A.x\n"
"        #define lumaSE luma4A.y\n"
"        #define lumaNW luma4B.w\n"
"        #define lumaN luma4B.z\n"
"        #define lumaW luma4B.x\n"
"    #else\n"
"        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n"
"        #if (FXAA_GREEN_AS_LUMA == 0)\n"
"            #define lumaM rgbyM.w\n"
"        #else\n"
"            #define lumaM rgbyM.y\n"
"        #endif\n"
"        FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\n"
"        FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\n"
"        FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\n"
"        FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\n"
"    #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaFloat maxSM = max(lumaS, lumaM);\n"
"    FxaaFloat minSM = min(lumaS, lumaM);\n"
"    FxaaFloat maxESM = max(lumaE, maxSM);\n"
"    FxaaFloat minESM = min(lumaE, minSM);\n"
"    FxaaFloat maxWN = max(lumaN, lumaW);\n"
"    FxaaFloat minWN = min(lumaN, lumaW);\n"
"    FxaaFloat rangeMax = max(maxWN, maxESM);\n"
"    FxaaFloat rangeMin = min(minWN, minESM);\n"
"    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\n"
"    FxaaFloat range = rangeMax - rangeMin;\n"
"    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\n"
"    FxaaBool earlyExit = range < rangeMaxClamped;\n"
"/*--------------------------------------------------------------------------*/\n"
"    if(earlyExit)\n"
"        #if (FXAA_DISCARD == 1)\n"
"            FxaaDiscard;\n"
"        #else\n"
"            return rgbyM;\n"
"        #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"    #if (FXAA_GATHER4_ALPHA == 0)\n"
"        FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\n"
"        FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\n"
"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\n"
"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n"
"    #else\n"
"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\n"
"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n"
"    #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaFloat lumaNS = lumaN + lumaS;\n"
"    FxaaFloat lumaWE = lumaW + lumaE;\n"
"    FxaaFloat subpixRcpRange = 1.0/range;\n"
"    FxaaFloat subpixNSWE = lumaNS + lumaWE;\n"
"    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\n"
"    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaFloat lumaNESE = lumaNE + lumaSE;\n"
"    FxaaFloat lumaNWNE = lumaNW + lumaNE;\n"
"    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\n"
"    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaFloat lumaNWSW = lumaNW + lumaSW;\n"
"    FxaaFloat lumaSWSE = lumaSW + lumaSE;\n"
"    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\n"
"    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\n"
"    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\n"
"    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\n"
"    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\n"
"    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\n"
"    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\n"
"    FxaaBool horzSpan = edgeHorz >= edgeVert;\n"
"    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\n"
"/*--------------------------------------------------------------------------*/\n"
"    if(!horzSpan) lumaN = lumaW;\n"
"    if(!horzSpan) lumaS = lumaE;\n"
"    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\n"
"    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaFloat gradientN = lumaN - lumaM;\n"
"    FxaaFloat gradientS = lumaS - lumaM;\n"
"    FxaaFloat lumaNN = lumaN + lumaM;\n"
"    FxaaFloat lumaSS = lumaS + lumaM;\n"
"    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\n"
"    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\n"
"    if(pairN) lengthSign = -lengthSign;\n"
"    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaFloat2 posB;\n"
"    posB.x = posM.x;\n"
"    posB.y = posM.y;\n"
"    FxaaFloat2 offNP;\n"
"    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\n"
"    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\n"
"    if(!horzSpan) posB.x += lengthSign * 0.5;\n"
"    if( horzSpan) posB.y += lengthSign * 0.5;\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaFloat2 posN;\n"
"    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\n"
"    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\n"
"    FxaaFloat2 posP;\n"
"    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\n"
"    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\n"
"    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\n"
"    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\n"
"    FxaaFloat subpixE = subpixC * subpixC;\n"
"    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\n"
"/*--------------------------------------------------------------------------*/\n"
"    if(!pairN) lumaNN = lumaSS;\n"
"    FxaaFloat gradientScaled = gradient * 1.0/4.0;\n"
"    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\n"
"    FxaaFloat subpixF = subpixD * subpixE;\n"
"    FxaaBool lumaMLTZero = lumaMM < 0.0;\n"
"/*--------------------------------------------------------------------------*/\n"
"    lumaEndN -= lumaNN * 0.5;\n"
"    lumaEndP -= lumaNN * 0.5;\n"
"    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\n"
"    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\n"
"    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\n"
"    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\n"
"    FxaaBool doneNP = (!doneN) || (!doneP);\n"
"    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\n"
"    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\n"
"/*--------------------------------------------------------------------------*/\n"
"    if(doneNP) {\n"
"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n"
"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n"
"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n"
"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n"
"        doneN = abs(lumaEndN) >= gradientScaled;\n"
"        doneP = abs(lumaEndP) >= gradientScaled;\n"
"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\n"
"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\n"
"        doneNP = (!doneN) || (!doneP);\n"
"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\n"
"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\n"
"/*--------------------------------------------------------------------------*/\n"
"        #if (FXAA_QUALITY_PS > 3)\n"
"        if(doneNP) {\n"
"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n"
"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n"
"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n"
"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n"
"            doneN = abs(lumaEndN) >= gradientScaled;\n"
"            doneP = abs(lumaEndP) >= gradientScaled;\n"
"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\n"
"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\n"
"            doneNP = (!doneN) || (!doneP);\n"
"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\n"
"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\n"
"/*--------------------------------------------------------------------------*/\n"
"            #if (FXAA_QUALITY_PS > 4)\n"
"            if(doneNP) {\n"
"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n"
"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n"
"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n"
"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n"
"                doneN = abs(lumaEndN) >= gradientScaled;\n"
"                doneP = abs(lumaEndP) >= gradientScaled;\n"
"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\n"
"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\n"
"                doneNP = (!doneN) || (!doneP);\n"
"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\n"
"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\n"
"/*--------------------------------------------------------------------------*/\n"
"                #if (FXAA_QUALITY_PS > 5)\n"
"                if(doneNP) {\n"
"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n"
"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n"
"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n"
"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n"
"                    doneN = abs(lumaEndN) >= gradientScaled;\n"
"                    doneP = abs(lumaEndP) >= gradientScaled;\n"
"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\n"
"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\n"
"                    doneNP = (!doneN) || (!doneP);\n"
"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\n"
"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\n"
"/*--------------------------------------------------------------------------*/\n"
"                    #if (FXAA_QUALITY_PS > 6)\n"
"                    if(doneNP) {\n"
"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n"
"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n"
"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n"
"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n"
"                        doneN = abs(lumaEndN) >= gradientScaled;\n"
"                        doneP = abs(lumaEndP) >= gradientScaled;\n"
"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\n"
"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\n"
"                        doneNP = (!doneN) || (!doneP);\n"
"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\n"
"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\n"
"/*--------------------------------------------------------------------------*/\n"
"                        #if (FXAA_QUALITY_PS > 7)\n"
"                        if(doneNP) {\n"
"                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n"
"                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n"
"                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n"
"                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n"
"                            doneN = abs(lumaEndN) >= gradientScaled;\n"
"                            doneP = abs(lumaEndP) >= gradientScaled;\n"
"                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\n"
"                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\n"
"                            doneNP = (!doneN) || (!doneP);\n"
"                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\n"
"                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\n"
"/*--------------------------------------------------------------------------*/\n"
"    #if (FXAA_QUALITY_PS > 8)\n"
"    if(doneNP) {\n"
"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n"
"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n"
"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n"
"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n"
"        doneN = abs(lumaEndN) >= gradientScaled;\n"
"        doneP = abs(lumaEndP) >= gradientScaled;\n"
"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\n"
"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\n"
"        doneNP = (!doneN) || (!doneP);\n"
"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\n"
"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\n"
"/*--------------------------------------------------------------------------*/\n"
"        #if (FXAA_QUALITY_PS > 9)\n"
"        if(doneNP) {\n"
"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n"
"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n"
"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n"
"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n"
"            doneN = abs(lumaEndN) >= gradientScaled;\n"
"            doneP = abs(lumaEndP) >= gradientScaled;\n"
"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\n"
"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\n"
"            doneNP = (!doneN) || (!doneP);\n"
"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\n"
"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\n"
"/*--------------------------------------------------------------------------*/\n"
"            #if (FXAA_QUALITY_PS > 10)\n"
"            if(doneNP) {\n"
"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n"
"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n"
"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n"
"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n"
"                doneN = abs(lumaEndN) >= gradientScaled;\n"
"                doneP = abs(lumaEndP) >= gradientScaled;\n"
"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\n"
"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\n"
"                doneNP = (!doneN) || (!doneP);\n"
"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\n"
"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\n"
"/*--------------------------------------------------------------------------*/\n"
"                #if (FXAA_QUALITY_PS > 11)\n"
"                if(doneNP) {\n"
"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n"
"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n"
"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n"
"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n"
"                    doneN = abs(lumaEndN) >= gradientScaled;\n"
"                    doneP = abs(lumaEndP) >= gradientScaled;\n"
"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\n"
"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\n"
"                    doneNP = (!doneN) || (!doneP);\n"
"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\n"
"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\n"
"/*--------------------------------------------------------------------------*/\n"
"                    #if (FXAA_QUALITY_PS > 12)\n"
"                    if(doneNP) {\n"
"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n"
"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n"
"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n"
"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n"
"                        doneN = abs(lumaEndN) >= gradientScaled;\n"
"                        doneP = abs(lumaEndP) >= gradientScaled;\n"
"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\n"
"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\n"
"                        doneNP = (!doneN) || (!doneP);\n"
"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\n"
"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\n"
"/*--------------------------------------------------------------------------*/\n"
"                    }\n"
"                    #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"                }\n"
"                #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"            }\n"
"            #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"        }\n"
"        #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"    }\n"
"    #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"                        }\n"
"                        #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"                    }\n"
"                    #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"                }\n"
"                #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"            }\n"
"            #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"        }\n"
"        #endif\n"
"/*--------------------------------------------------------------------------*/\n"
"    }\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaFloat dstN = posM.x - posN.x;\n"
"    FxaaFloat dstP = posP.x - posM.x;\n"
"    if(!horzSpan) dstN = posM.y - posN.y;\n"
"    if(!horzSpan) dstP = posP.y - posM.y;\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\n"
"    FxaaFloat spanLength = (dstP + dstN);\n"
"    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\n"
"    FxaaFloat spanLengthRcp = 1.0/spanLength;\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaBool directionN = dstN < dstP;\n"
"    FxaaFloat dst = min(dstN, dstP);\n"
"    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\n"
"    FxaaFloat subpixG = subpixF * subpixF;\n"
"    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\n"
"    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\n"
"/*--------------------------------------------------------------------------*/\n"
"    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\n"
"    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\n"
"    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\n"
"    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\n"
"    #if (FXAA_DISCARD == 1)\n"
"        return FxaaTexTop(tex, posM);\n"
"    #else\n"
"        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\n"
"    #endif\n"
"}\n"
};

const char fxaa_fp[] = {
"void main() {\n"
"  rt_col = FxaaPixelShader(gl_FragCoord.xy*u_rcptexsize, u_tex, u_rcptexsize, 0.75, 0.125, 0.0);\n"
"}\n"
};

const char fxaa_vp[] = {
"void main() {gl_Position = vec4(vs_pos,0.0,1.0);}\n"
};

const char hell[] = {
"#if 0\n"
"const float PI=3.14159265358979323846;\n"
"float speed=iGlobalTime*0.2975;\n"
"float ground_x=1.0-0.325*sin(PI*speed*0.25);\n"
"float ground_y=1.0;\n"
"float ground_z=0.5;\n"

"vec2 rotate(vec2 k,float t) {\n"
"  return vec2(cos(t)*k.x-sin(t)*k.y,sin(t)*k.x+cos(t)*k.y);\n"
"}\n"

"float draw_scene(vec3 p) {\n"
"  float tunnel_m=0.125*cos(PI*p.z*1.0+speed*4.0-PI);\n"
"  float tunnel1_p=2.0;\n"
"  float tunnel1_w=tunnel1_p*0.225;\n"
"  float tunnel1=length(mod(p.xy,tunnel1_p)-tunnel1_p*0.5)-tunnel1_w;  // tunnel1\n"
"  float tunnel2_p=2.0;\n"
"  float tunnel2_w=tunnel2_p*0.2125+tunnel2_p*0.0125*cos(PI*p.y*8.0)+tunnel2_p*0.0125*cos(PI*p.z*8.0);\n"
"  float tunnel2=length(mod(p.xy,tunnel2_p)-tunnel2_p*0.5)-tunnel2_w;  // tunnel2\n"
"  float hole1_p=1.0;\n"
"  float hole1_w=hole1_p*0.5;\n"
"  float hole1=length(mod(p.xz,hole1_p).xy-hole1_p*0.5)-hole1_w;  // hole1\n"
"  float hole2_p=0.25;\n"
"  float hole2_w=hole2_p*0.375;\n"
"  float hole2=length(mod(p.yz,hole2_p).xy-hole2_p*0.5)-hole2_w;  // hole2\n"
"  float hole3_p=0.5;\n"
"  float hole3_w=hole3_p*0.25+0.125*sin(PI*p.z*2.0);\n"
"  float hole3=length(mod(p.xy,hole3_p).xy-hole3_p*0.5)-hole3_w;  // hole3\n"
"  float tube_m=0.075*sin(PI*p.z*1.0);\n"
"  float tube_p=0.5+tube_m;\n"
"  float tube_w=tube_p*0.025+0.00125*cos(PI*p.z*128.0);\n"
"  float tube=length(mod(p.xy,tube_p)-tube_p*0.5)-tube_w;      // tube\n"
"  float bubble_p=0.05;\n"
"  float bubble_w=bubble_p*0.5+0.025*cos(PI*p.z*2.0);\n"
"  float bubble=length(mod(p.yz,bubble_p)-bubble_p*0.5)-bubble_w;  // bubble\n"
"  return max(min(min(-tunnel1,mix(tunnel2,-bubble,0.375)),max(min(-hole1,hole2),-hole3)),-tube);\n"
"}\n"

"vec4 entry(void) {\n"
"  vec2 position=(gl_FragCoord.xy/iResolution.xy);\n"
"  vec2 p=-1.0+2.0*position;\n"
"  vec3 dir=normalize(vec3(p*vec2(1.77,1.0),1.0));    // screen ratio (x,y) fov (z)\n"
"  dir.zx=rotate(dir.zx,-PI*speed*0.25);        // rotation y\n"
"  dir.xy=rotate(dir.xy,-speed*0.5);          // rotation z\n"
"  vec3 ray=vec3(ground_x,ground_y,ground_z-speed*2.5);\n"
"  float t=0.0;\n"
"  const int ray_n=96;\n"
"  for(int i=0;i<ray_n;i++) {\n"
"    float k=draw_scene(ray+dir*t);\n"
"    t+=k*0.75;\n"
"  }\n"
"  vec3 hit=ray+dir*t;\n"
"  vec2 h=vec2(-0.0025,0.002); // light\n"
"  vec3 n=normalize(vec3(draw_scene(hit+h.xyx),draw_scene(hit+h.yxy),draw_scene(hit+h.yyx)));\n"
"  float c=(n.x+n.y+n.z)*0.35;\n"
"  vec3 color=vec3(c,c,c)+t*0.0625;\n"
"  return vec4(vec3(c-t*0.0375+p.y*0.05,c-t*0.025-p.y*0.0625,c+t*0.025-p.y*0.025)+color*color,1.0);\n"
"}\n"
"#else\n"
"vec4 entry(void) {\n"
"  vec2 sq = fract(16.0*gl_FragCoord.xy/iResolution.xy);\n"
"  vec4 col = any(lessThan(sq,vec2(0.03))) ? vec4(0.0) : vec4(0.7);\n"
"  return col;\n"
"}\n"
"#endif\n"
};

//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//
const char noise2D[] = {
"vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n"
"vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n"
"vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n"

"float snoise(vec2 v) {\n"
"  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n"
"                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n"
"                      -0.577350269189626, // -1.0 + 2.0 * C.x\n"
"                      0.024390243902439); // 1.0 / 41.0\n"
"  // First corner\n"
"  vec2 i  = floor(v + dot(v, C.yy));\n"
"  vec2 x0 = v -   i + dot(i, C.xx);\n"

"  // Other corners\n"
"  vec2 i1;\n"
"  //i1.x = step(x0.y, x0.x); // x0.x > x0.y ? 1.0 : 0.0\n"
"  //i1.y = 1.0 - i1.x;\n"
"  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n"
"  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n"
"  // x1 = x0 - i1 + 1.0 * C.xx ;\n"
"  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n"
"  vec4 x12 = x0.xyxy + C.xxzz;\n"
"  x12.xy -= i1;\n"

"  // Permutations\n"
"  i = mod289(i); // Avoid truncation effects in permutation\n"
"  vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));\n"

"  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n"
"  m = m*m ;\n"
"  m = m*m ;\n"

"  // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n"
"  // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n"
"  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n"
"  vec3 h = abs(x) - 0.5;\n"
"  vec3 ox = floor(x + 0.5);\n"
"  vec3 a0 = x - ox;\n"

"  // Normalise gradients implicitly by scaling m\n"
"  // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n"
"  m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);\n"

"  // Compute final noise value at P\n"
"  vec3 g;\n"
"  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n"
"  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n"
"  return 130.0 * dot(m, g);\n"
"}\n"
};

//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//
const char noise3D[] = {
"vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n"
"vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n"
"vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }\n"
"vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n"

"float snoise(vec3 v) {\n"
"  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n"
"  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n"

"  // First corner\n"
"  vec3 i  = floor(v + dot(v, C.yyy));\n"
"  vec3 x0 =   v - i + dot(i, C.xxx) ;\n"

"  // Other corners\n"
"  vec3 g = step(x0.yzx, x0.xyz);\n"
"  vec3 l = 1.0 - g;\n"
"  vec3 i1 = min(g.xyz, l.zxy);\n"
"  vec3 i2 = max(g.xyz, l.zxy);\n"

"  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n"
"  //   x1 = x0 - i1  + 1.0 * C.xxx;\n"
"  //   x2 = x0 - i2  + 2.0 * C.xxx;\n"
"  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n"
"  vec3 x1 = x0 - i1 + C.xxx;\n"
"  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n"
"  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n"

"  // Permutations\n"
"  i = mod289(i);\n"
"  vec4 p = permute(permute(permute(\n"
"           i.z + vec4(0.0, i1.z, i2.z, 1.0))\n"
"         + i.y + vec4(0.0, i1.y, i2.y, 1.0))\n"
"         + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n"

"  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n"
"  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n"
"  float n_ = 0.142857142857; // 1.0/7.0\n"
"  vec3  ns = n_ * D.wyz - D.xzx;\n"

"  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n"

"  vec4 x_ = floor(j * ns.z);\n"
"  vec4 y_ = floor(j - 7.0 * x_);    // mod(j,N)\n"

"  vec4 x = x_ *ns.x + ns.yyyy;\n"
"  vec4 y = y_ *ns.x + ns.yyyy;\n"
"  vec4 h = 1.0 - abs(x) - abs(y);\n"

"  vec4 b0 = vec4(x.xy, y.xy);\n"
"  vec4 b1 = vec4(x.zw, y.zw);\n"

"  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n"
"  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n"
"  vec4 s0 = floor(b0)*2.0 + 1.0;\n"
"  vec4 s1 = floor(b1)*2.0 + 1.0;\n"
"  vec4 sh = -step(h, vec4(0.0));\n"

"  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n"
"  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n"

"  vec3 p0 = vec3(a0.xy,h.x);\n"
"  vec3 p1 = vec3(a0.zw,h.y);\n"
"  vec3 p2 = vec3(a1.xy,h.z);\n"
"  vec3 p3 = vec3(a1.zw,h.w);\n"

"  //Normalise gradients\n"
"  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n"
"  p0 *= norm.x;\n"
"  p1 *= norm.y;\n"
"  p2 *= norm.z;\n"
"  p3 *= norm.w;\n"

"  // Mix final noise value\n"
"  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n"
"  m = m * m;\n"
"  return 42.0 * dot(m*m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n"
"}\n"
};

//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//
const char noise4D[] = {
"vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n"
"float mod289(float x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n"
"vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }\n"
"float permute(float x) { return mod289(((x*34.0)+1.0)*x); }\n"
"vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n"
"float taylorInvSqrt(float r) { return 1.79284291400159 - 0.85373472095314 * r; }\n"

"vec4 grad4(float j, vec4 ip) {\n"
"  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n"
"  vec4 p,s;\n"
"  p.xyz = floor(fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n"
"  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n"
"  s = vec4(lessThan(p, vec4(0.0)));\n"
"  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n"
"  return p;\n"
"}\n"

"// (sqrt(5) - 1)/4 = F4, used once below\n"
"#define F4 0.309016994374947451\n"

"float snoise(vec4 v) {\n"
"  const vec4  C = vec4(0.138196601125011,   // (5 - sqrt(5))/20  G4\n"
"                       0.276393202250021,   // 2 * G4\n"
"                       0.414589803375032,   // 3 * G4\n"
"                       -0.447213595499958); // -1 + 4 * G4\n"

"  // First corner\n"
"  vec4 i  = floor(v + dot(v, vec4(F4)));\n"
"  vec4 x0 = v -   i + dot(i, C.xxxx);\n"

"  // Other corners\n"

"  // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n"
"  vec4 i0;\n"
"  vec3 isX = step(x0.yzw, x0.xxx);\n"
"  vec3 isYZ = step(x0.zww, x0.yyz);\n"
"  //  i0.x = dot(isX, vec3(1.0));\n"
"  i0.x = isX.x + isX.y + isX.z;\n"
"  i0.yzw = 1.0 - isX;\n"
"  //  i0.y += dot(isYZ.xy, vec2(1.0));\n"
"  i0.y += isYZ.x + isYZ.y;\n"
"  i0.zw += 1.0 - isYZ.xy;\n"
"  i0.z += isYZ.z;\n"
"  i0.w += 1.0 - isYZ.z;\n"

"  // i0 now contains the unique values 0,1,2,3 in each channel\n"
"  vec4 i3 = clamp(i0, 0.0, 1.0);\n"
"  vec4 i2 = clamp(i0-1.0, 0.0, 1.0);\n"
"  vec4 i1 = clamp(i0-2.0, 0.0, 1.0);\n"

"  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n"
"  //  x1 = x0 - i1  + 1.0 * C.xxxx\n"
"  //  x2 = x0 - i2  + 2.0 * C.xxxx\n"
"  //  x3 = x0 - i3  + 3.0 * C.xxxx\n"
"  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n"
"  vec4 x1 = x0 - i1 + C.xxxx;\n"
"  vec4 x2 = x0 - i2 + C.yyyy;\n"
"  vec4 x3 = x0 - i3 + C.zzzz;\n"
"  vec4 x4 = x0 + C.wwww;\n"

"  // Permutations\n"
"  i = mod289(i);\n"
"  float j0 = permute(permute(permute(permute(i.w) + i.z) + i.y) + i.x);\n"
"  vec4 j1 = permute(permute(permute(permute(\n"
"             i.w + vec4(i1.w, i2.w, i3.w, 1.0))\n"
"           + i.z + vec4(i1.z, i2.z, i3.z, 1.0))\n"
"           + i.y + vec4(i1.y, i2.y, i3.y, 1.0))\n"
"           + i.x + vec4(i1.x, i2.x, i3.x, 1.0));\n"

"  // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n"
"  // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n"
"  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n"

"  vec4 p0 = grad4(j0,   ip);\n"
"  vec4 p1 = grad4(j1.x, ip);\n"
"  vec4 p2 = grad4(j1.y, ip);\n"
"  vec4 p3 = grad4(j1.z, ip);\n"
"  vec4 p4 = grad4(j1.w, ip);\n"

"  // Normalise gradients\n"
"  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n"
"  p0 *= norm.x;\n"
"  p1 *= norm.y;\n"
"  p2 *= norm.z;\n"
"  p3 *= norm.w;\n"
"  p4 *= taylorInvSqrt(dot(p4,p4));\n"

"  // Mix contributions from the five corners\n"
"  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n"
"  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)           ), 0.0);\n"
"  m0 = m0 * m0;\n"
"  m1 = m1 * m1;\n"
"  return 49.0 * (dot(m0*m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2)))\n"
"      + dot(m1*m1, vec2(dot(p3, x3), dot(p4, x4)))) ;\n"
"}\n"
};
const char shadertoy_fp[] = {
"void main() {\n"
"  SWITCH_WEBGL(gl_FragColor, rt_col) = entry();\n"
"}\n"
};

const char shadertoy_vp[] = {
"void main() {gl_Position = vec4(vs_pos,0.0,1.0);}\n"
};

const char simple_material_fp[] = {
"PS_IN vec3 fs_nor;\n"
"PS_IN vec3 fs_pos;\n"
"void main() {\n"
"  vec3 p = fs_pos*3.0;\n"
"  float c = snoise(p);\n"
"  float dx = snoise(p+vec3(0.01,0.0,0.0));\n"
"  float dy = snoise(p+vec3(0.0,0.01,0.0));\n"
"  float dz = snoise(p+vec3(0.0,0.0,0.01));\n"
"  vec3 dn = normalize(vec3(c-dx, c-dy, c-dz));\n"
"  vec3 n = normalize(fs_nor + dn/10.0);\n"
"  SWITCH_WEBGL(gl_FragColor, rt_col) = vec4(abs(n), 1.0);\n"
"}\n"
};

const char simple_material_vp[] = {
"VS_OUT vec3 fs_pos;\n"
"VS_OUT vec3 fs_nor;\n"
"void main() {\n"
"  fs_nor = vs_nor;\n"
"  fs_pos = vs_pos;\n"
"  gl_Position = u_mvp*vec4(vs_pos,1.0);\n"
"}\n"
};

const char sky[] = {
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0
// Unported License.
// From rolling hills by Dave Hoskins (https://www.shadertoy.com/view/Xsf3zX)

"const float PI = 3.141592653, PI2 = 2.0*PI;\n"
"const vec3 SUN_COLOR = vec3(1.0, 0.75, 0.6);\n"

"vec3 getsky(vec3 rd, bool withsun, vec3 sunlight, vec3 suncolour) {\n"
"  float sunamount = withsun ? max(dot(rd, sunlight), 0.0 ) : 0.0;\n"
"  float factor = pow(1.0-max(rd.y,0.0),6.0);\n"
"  vec3 sun = suncolour * sunamount * sunamount * 0.25\n"
"           + SUN_COLOR * min(pow(sunamount, 800.0)*1.5, 0.3);\n"
"  return clamp(mix(vec3(0.1,0.2,0.3),vec3(0.32,0.32,0.32), factor)+sun,0.0,1.0);\n"
"}\n"

"vec3 getsky(vec3 rd, vec3 sunlight) {\n"
"  // X = north, Y = top\n"
"  vec3 suncolour = SUN_COLOR;\n"
"  if (sunlight.y < 0.12)\n"
"    suncolour = mix(vec3(2.0,0.4,0.2), SUN_COLOR, smoothstep(0.0,1.0,sunlight.y*8.0));\n"
"  vec3 col = sqrt(getsky(rd, true, sunlight, suncolour));\n"
"  return col + suncolour*mix(0.0, 0.051, sunlight.y<0.05 ? 1.0-sunlight.y*20.0 : 0.0);\n"
"}\n"
};

const char split_deferred_fp[] = {
"void main() {\n"
"  vec2 uv = floor(gl_FragCoord.xy);\n"
"  vec2 bufindex = uv * u_rcpsubbufferdim;\n"
"  vec2 pixindex = mod(uv, u_subbufferdim);\n"
"  vec2 splituv = SPLITNUM * pixindex + bufindex;\n"
"  vec3 nor = normalize(2.0*texture2DRect(u_nortex, splituv).xyz-1.0);\n"
"  float depth = texture2DRect(u_depthtex, splituv).r;\n"
"  vec4 posw = u_invmvp * vec4(splituv, depth, 1.0);\n"
"  vec3 pos = posw.xyz / posw.w;\n"
"  vec3 ldir = u_lightpos-pos;\n"
"  float llen2 = dot(ldir,ldir);\n"
"  vec3 lit = u_lightpow * max(dot(nor,ldir),0.0) / (llen2*llen2);\n"
"  SWITCH_WEBGL(gl_FragColor, rt_col) = vec4(lit,1.0);\n"
"}\n"
};

const char split_deferred_vp[] = {
"void main() {gl_Position = u_mvp*vec4(vs_pos,1.0,1.0);}\n"
};


